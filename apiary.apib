FORMAT: 1A

# Album Parrot API

# Security [/authenticate]
Authenticating Users

Authentication is managed through JSON Web Tokens (JWT). Once you have a token, you should pass it in the Authentication HTTP header on all subsequent requests.
Tokens are single use, and you will get a new token returned to you as an Authentication header in the response.
You should use the new token on the next request, and so on.

## Fetch a security token [POST]
Authenticates the credentials passed, and returns a token for future requests if successful.

+ Request (application/json)
    + Body

            [
                {
                    "email": "me@design-studio.com",
                    "password": "P$a$$w0rd"
                }
            ]

+ Response 200 (application/json)
    + Body

            {
                "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEsImlzcyI6Imh0dHA6XC9cL2FwaS5kZXYuYWxidW1wYXJyb3QuY29tXC9hdXRoZW50aWNhdGUiLCJpYXQiOjE0NjExNzk5NjIsImV4cCI6MTQ2MTE4MzU2MiwibmJmIjoxNDYxMTc5OTYyLCJqdGkiOiJjNjhiMWRmOTM1ZjVmMmI5NjdhOGJjYjYwMDBjOGFhNSJ9.7de57BSaYwPJ9cFu4j1NsP6AXwNya_Ose2scho_tMEc"
            }

# Albums [/albums]
Album resource representation.

# Email Settings [/email/settings]

# Email Templates [/email/templates]

# Email Logs [/email/log]

# Albums [/designer/albums]
Album design resource representation.

## Get all albums [GET /designer/albums{?includes}]
Get all the album designs associated with the current user.

+ Parameters
    + includes: `spreads` (string, optional) - The available includes are spreads. Use spreads.photos and spreads.textBlocks to include sub resources

+ Response 200 (application/json)
    + Body

            {
                "data": [
                    {
                        "id": "050b29e7-414f-4018-94c7-74c814c9c220",
                        "title": "voluptates porro sapiente"
                    },
                    {
                        "id": "07ce8d6d-d0b4-4aea-bff6-dc7bf559894c",
                        "title": "ea consequatur omnis"
                    }
                ]
            }

## Get a single album design [GET /designer/albums/{album}{?includes}]
Get the specific album design

+ Parameters
    + album: `050b29e7-414f-4018-94c7-74c814c9c220` (string, required) - The id of the album to fetch
    + includes: `spreads` (string, optional) - The available includes are spreads. Use spreads.photos and spreads.textBlocks to include sub resources

+ Response 200 (application/json)
    + Body

            {
                "data": {
                    "id": "050b29e7-414f-4018-94c7-74c814c9c220",
                    "title": "voluptates porro sapiente"
                }
            }

## Create an album design [POST]
Create a new album design

+ Request (application/json)
    + Body

            {
                "title": "Tuscany Wedding",
                "dimensions": {
                    "width": 7088,
                    "height": 3544,
                    "dpi": 300
                },
                "crop": {
                    "width": 7088,
                    "height": 3544
                }
            }

+ Response 201 (application/json)
    + Body

            {
                "data": {
                    "id": "99557b15-1cf4-45a3-ba1e-d34f9a7da9e2",
                    "title": "Tuscany Wedding",
                    "dimensions": {
                        "width": 7088,
                        "height": 3544,
                        "dpi": 300
                    },
                    "crop": {
                        "width": 7088,
                        "height": 3544
                    }
                }
            }

## Update an existing album design [PUT /designer/albums/{album}]
Update an existing album design

+ Parameters
    + album: `050b29e7-414f-4018-94c7-74c814c9c220` (string, required) - The id of the album to update

+ Request (application/json)
    + Body

            {
                "title": "Tuscany Wedding 2"
            }

+ Response 200 (application/json)
    + Body

            []

## Delete an album [DELETE /designer/albums/{album}]
Deleting the specified album will delete all related spreads.

+ Parameters
    + album: `050b29e7-414f-4018-94c7-74c814c9c220` (string, required) - The id of the album to delete

+ Response 200 (application/json)
    + Body

            []

# Spreads [/designer/spreads]

## Get a single spread [GET /designer/spreads/{spread}{?includes}]
Fetches the specified spread from the album.

+ Parameters
    + spread: `spread_9377700fdab04a10a021fff0a29ebe59` (string, required) - The id of the spread to fetch
    + includes: `photos` (string, optional) - The available includes are textBlocks and photos

+ Response 200 (application/json)
    + Body

            {
                "data": {
                    "id": "spread_71d12701c8ec4eb29f3a8578b03f8822",
                    "order": 3,
                    "areas": {
                        "data": []
                    }
                }
            }

## Creates a new spread [POST]
Creates a new blank spread in the specified album. Order is optional, and by default will add a new spread at the end of the album

+ Parameters
    + album: `album_3c543c5040ad4809ad39d1373f890cc8` (string, required) - The id of the album to add the spread to
    + order: `4` (string, optional) - The id of the spread to update

+ Request (application/json)
    + Body

            {
                "order": 4,
                "album": "album_3c543c5040ad4809ad39d1373f890cc8"
            }

+ Response 201 (application/json)
    + Body

            {
                "data": {
                    "id": "spread_04185c6f6618433eb9f045576bb8171b",
                    "order": 4,
                    "areas": {
                        "data": []
                    }
                }
            }

## Updates an existing spread [PUT /designer/spreads/{spread}]
Updates the ordering of the existing page

+ Parameters
    + spread: `spread_2f1dda37288d46399f411214d3465bce` (string, required) - The id of the spread to update

+ Request (application/json)
    + Body

            {
                "order": 2,
                "photos": [
                    {
                        "position": {
                            "x": 0,
                            "y": 100
                        },
                        "size": {
                            "width": 100,
                            "height": 100
                        },
                        "offset": {
                            "x": 0,
                            "y": 0
                        },
                        "order": 0,
                        "path": "/path/to/photo"
                    }
                ],
                "textBlocks": [
                    {
                        "position": {
                            "x": 0,
                            "y": 100
                        },
                        "size": {
                            "width": 100,
                            "height": 100
                        },
                        "offset": {
                            "x": 0,
                            "y": 0
                        },
                        "order": 0,
                        "text": "fab album btw"
                    }
                ]
            }

+ Response 200 (application/json)
    + Body

            {
                "data": {
                    "id": "spread_2f1dda37288d46399f411214d3465bce",
                    "order": 2,
                    "photos": {
                        "data": [
                            {
                                "id": "photo_acaa2fa4884e46b0a8dfe3df04c831ee",
                                "path": "\/path\/to\/photo",
                                "area": {
                                    "data": {
                                        "id": "area_ec315a6d8e1a4670bacf16d549e29e57",
                                        "position": {
                                            "x": 0,
                                            "y": 100
                                        },
                                        "size": {
                                            "width": 100,
                                            "height": 100
                                        },
                                        "offset": {
                                            "x": 0,
                                            "y": 0
                                        },
                                        "order": 0
                                    }
                                }
                            }
                        ]
                    },
                    "textBlocks": {
                        "data": [
                            {
                                "id": "text_4c111c75eea443fd8f54783f2b608ef4",
                                "text": "fab album btw",
                                "area": {
                                    "data": {
                                        "id": "area_b15fd579f7454ecb8560a26a0ec7a882",
                                        "position": {
                                            "x": 0,
                                            "y": 100
                                        },
                                        "size": {
                                            "width": 100,
                                            "height": 100
                                        },
                                        "offset": {
                                            "x": 0,
                                            "y": 0
                                        },
                                        "order": 0
                                    }
                                }
                            }
                        ]
                    }
                }
            }

## Delete an spread [DELETE /designer/spreads/{spread}]
Deleting the specified spread will delete all related areas.

+ Parameters
    + spread: `spread_04185c6f6618433eb9f045576bb8171b` (string, required) - The id of the spread to fetch

+ Response 200 (application/json)
    + Body

            []

# Templates [/designer/templates]
Album design templates representation.

## Fetch Templates [GET /designer/templates{?type,photosPerSpread}]
Get all the template applicable to the specified type of album design, and number of photos per spread.

This will return a series of templates containing references to the position and size of each photo area.
These should be interpreted as ratios to be applied against both the real size of the album canvas and the size of the album design
visually on the screen.

+ Parameters
    + type: `square` (string, optional) - The type of album design. Available options are square, vertical and horizontal
        + Default: square
    + photosPerSpread: `3` (number, optional) - The number of areas in the spread. By default it will retrieve all templates

+ Response 200 (application/json)
    + Body

            {
                "data": [
                    {
                        "areas": [
                            {
                                "top": 0,
                                "left": 0,
                                "order": 0,
                                "width": 0.333333333333,
                                "height": 1
                            },
                            {
                                "top": 0,
                                "left": 0.333333333333,
                                "order": 1,
                                "width": 0.333333333333,
                                "height": 1
                            },
                            {
                                "top": 0,
                                "left": 0.666666666667,
                                "order": 2,
                                "width": 0.333333333333,
                                "height": 1
                            }
                        ]
                    }
                ]
            }

# AppHooksEmailLogHook